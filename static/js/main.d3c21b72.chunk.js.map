{"version":3,"sources":["components/Alert.wav","components/StartButton.js","components/Alert.js","components/Progress.js","components/Display.js","components/DurationControls.js","App.js","index.js"],"names":["module","exports","StartButton","props","isStarted","controlsShown","className","id","onClick","width","height","viewBox","xmlns","d","style","marginLeft","Alert","React","forwardRef","ref","src","sound","getOffset","circumference","progress","Progress","offset","outerCircumference","OUTER_RADIUS","Math","PI","innerCircumference","INNER_RADIUS","isBreak","showControls","secondsPassed","r","cx","cy","fill","stroke","strokeWidth","strokeLinecap","strokeDasharray","strokeDashoffset","Display","currentSession","timeLeft","handleResetButton","sessionId","split","toLowerCase","DurationControls","Arrow","defaultState","session","break","getTimeLeft","sessionDuration","Date","toTimeString","match","App","state","AlertRef","createRef","setDuration","bind","closeControls","tick","handleStartButton","startButtonHandler","this","breakDuration","replace","toUpperCase","type","setState","duration","newDuration","current","play","clearInterval","timer","pause","currentTime","setInterval","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d3c21b72.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Alert.ec5aa5ba.wav\";","import React from 'react'\nimport './StartButton.css'\n\nconst StartButton = (props) => {\n  const { isStarted, controlsShown } = props\n  const Icon = () => {\n    if (controlsShown) {\n      return (\n        <svg width='40' height='40' viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'>\n          <path d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z' />\n        </svg>\n      )\n    } else if (isStarted) {\n      return (\n        <svg width='40' height='45.71' viewBox='0 0 448 512' xmlns='http://www.w3.org/2000/svg'>\n          <path d='M144 479H48c-26.5 0-48-21.5-48-48V79c0-26.5 21.5-48 48-48h96c26.5 0 48 21.5 48 48v352c0 26.5-21.5 48-48 48zm304-48V79c0-26.5-21.5-48-48-48h-96c-26.5 0-48 21.5-48 48v352c0 26.5 21.5 48 48 48h96c26.5 0 48-21.5 48-48z' />\n        </svg>\n      )\n    }\n    return (\n      <svg style={{ marginLeft: '0.6em' }} width='40' height='46' viewBox='0 0 40 46' xmlns='http://www.w3.org/2000/svg'>\n        <path d='M37.8939 19.2858L6.46447 0.590065C3.91082 -0.928233 0 0.545145 0 4.30046V41.6829C0 45.0519 3.63403 47.0823 6.46447 45.3933L37.8939 26.7066C40.6976 25.0445 40.7065 20.9478 37.8939 19.2858Z' />\n      </svg>\n    )\n  }\n\n  return (\n    <button\n      className='StartButton App__button bounceIn'\n      id='start_stop'\n      onClick={props.onClick}\n    >\n      <Icon />\n    </button>\n  )\n}\n\nexport default StartButton\n","import React from 'react'\nimport './Alert.css'\nimport sound from './Alert.wav'\n\nconst Alert = React.forwardRef((props, ref) => {\n  return (\n    <audio\n      id='beep'\n      ref={ref}\n      src={sound}\n    >\n        Your browser does not support the\n      <code>audio</code> element.\n    </audio>\n  )\n})\n\nexport default Alert\n","import React from 'react'\nimport './Progress.css'\n\nconst Progress = (props) => {\n  const OUTER_RADIUS = 110\n  const INNER_RADIUS = 84\n  const STROKE_WIDTH = 25\n  const outerCircumference = OUTER_RADIUS * 2 * Math.PI\n  const innerCircumference = INNER_RADIUS * 2 * Math.PI\n  const { progress, isBreak, showControls, secondsPassed } = props\n  let offset\n  if (isBreak) offset = getOffset(innerCircumference, progress)\n  else offset = getOffset(outerCircumference, progress)\n\n  return (\n    <svg\n      className='Progress'\n      viewBox='0 0 250 250'\n      width='250'\n      height='250'\n    >\n      <circle\n        className='Progress__outer'\n        onClick={() => {\n          if (secondsPassed) return null\n          showControls('session')\n        }}\n        r={OUTER_RADIUS}\n        cx='125'\n        cy='125'\n        fill='transparent'\n        stroke='#74E900'\n        strokeWidth={STROKE_WIDTH}\n        strokeLinecap='round'\n        strokeDasharray={outerCircumference}\n        strokeDashoffset={isBreak ? 0 : offset}\n      />\n      <circle\n        onClick={() => {\n          if (secondsPassed) return null\n          showControls('break')\n        }}\n        className='Progress__inner'\n        r={INNER_RADIUS}\n        cx='125'\n        cy='125'\n        fill='transparent'\n        stroke='#F6511D'\n        strokeWidth={STROKE_WIDTH}\n        strokeLinecap='round'\n        strokeDasharray={innerCircumference}\n        strokeDashoffset={isBreak ? offset : 0}\n      />\n    </svg>\n  )\n}\n\nfunction getOffset (circumference, progress) {\n  return -circumference * progress / 100\n}\n\nexport default Progress\n","import './Display.css'\nimport React from 'react'\n\nconst Display = (props) => {\n  const { currentSession, timeLeft, handleResetButton } = props\n  const ResetIcon = () => {\n    return (\n      <svg width='36' height='36' viewBox='0 0 36 36' xmlns='http://www.w3.org/2000/svg'>\n        <path d='M12.2881 5.25684C15.5682 3.85545 19.0986 3.86926 22.1971 5.02552L23.2051 2.50076C23.6318 1.43186 25.1377 1.41249 25.5918 2.47001L28.4386 9.10031C28.7201 9.75588 28.4169 10.5155 27.7613 10.797L21.131 13.6438C20.0735 14.0979 18.9949 13.0467 19.4216 11.9779L20.5999 9.02639C18.4597 8.25252 16.1445 8.30889 14.0383 9.1918C9.45153 11.1145 7.18739 16.4667 9.25418 21.1712C11.2148 25.6341 16.4597 27.8333 21.0997 25.8411C23.1338 24.9677 24.7445 23.4163 25.6888 21.4365C25.835 21.13 26.1946 20.9904 26.5101 21.1162L29.3139 22.2356C29.6583 22.3731 29.8151 22.771 29.6603 23.108C28.3288 26.0064 25.9602 28.4402 22.7986 29.7977C16.0245 32.7063 8.17513 29.5727 5.26652 22.7987C2.36123 16.0324 5.51661 8.14997 12.2881 5.25684Z' />\n      </svg>\n    )\n  }\n  const sessionId = currentSession.split(' ')[0].toLowerCase()\n\n  return (\n    <div className={`Display Display--${sessionId}`}>\n      <span\n        className='Display__current'\n        id='timer-label'\n      >\n        {currentSession}\n      </span>\n      <span\n        className='Display__remaining'\n        id='time-left'\n      >\n        {timeLeft}\n      </span>\n      <button\n        className='Display__reset'\n        id='reset'\n        onClick={handleResetButton}\n      >\n        <ResetIcon />\n      </button>\n    </div>\n  )\n}\n\nexport default Display\n","import React from 'react'\nimport './DurationControls.css'\n\nconst DurationControls = (props) => {\n  let { id, onClick } = props\n  id = id.split(' ')[0].toLowerCase()\n  const Arrow = () => {\n    return (\n      <svg width='9' height='14' viewBox='0 0 9 14' xmlns='http://www.w3.org/2000/svg'>\n        <path d='M0.212668 6.09385L6.09414 0.212668C6.3777 -0.0708895 6.83769 -0.0708895 7.12125 0.212668L7.80729 0.898715C8.09055 1.18197 8.09085 1.64075 7.8085 1.92461L3.1472 6.6074L7.8082 11.2905C8.09085 11.5744 8.09025 12.0331 7.80699 12.3164L7.12094 13.0024C6.83739 13.286 6.3774 13.286 6.09384 13.0024L0.212668 7.12095C-0.0708894 6.83739 -0.0708894 6.3774 0.212668 6.09385Z' />\n      </svg>\n    )\n  }\n\n  return (\n    <div\n      className={`DurationControls DurationControls--${id}`}\n    >\n      <button\n        className='App__button DurationControls__button bounceIn'\n        id={`${id}-decrement`}\n        onClick={() => onClick(-1, id)}\n      >\n        <Arrow />\n      </button>\n      <button\n        className='App__button DurationControls__button bounceIn'\n        id={`${id}-increment`}\n        onClick={() => onClick(1, id)}\n      >\n        <Arrow />\n      </button>\n    </div>\n  )\n}\n\nexport default DurationControls\n","import React, { Component } from 'react'\nimport StartButton from './components/StartButton'\nimport Alert from './components/Alert'\nimport Progress from './components/Progress'\nimport Display from './components/Display'\nimport DurationControls from './components/DurationControls'\nimport './App.css'\n\nconst defaultState = {\n  session: 1,\n  break: 1,\n  secondsPassed: 0,\n  isStarted: false,\n  isBreak: false,\n  controlsShown: null\n}\n\nclass App extends Component {\n  constructor (props) {\n    super(props)\n    this.state = defaultState\n    this.AlertRef = React.createRef()\n    this.setDuration = this.setDuration.bind(this)\n    this.showControls = this.showControls.bind(this)\n    this.closeControls = this.closeControls.bind(this)\n    this.tick = this.tick.bind(this)\n    this.handleResetButton = this.handleResetButton.bind(this)\n    this.handleStartButton = this.handleStartButton.bind(this)\n  }\n\n  render () {\n    const { secondsPassed, isBreak, isStarted, controlsShown } = this.state\n    const sessionDuration = this.state.session\n    const breakDuration = this.state.break\n    const currentSessionDuration = isBreak ? breakDuration : sessionDuration\n    const progress = secondsPassed * 100 / (currentSessionDuration * 60)\n\n    let timeLeft\n    let startButtonHandler\n    let currentSession\n\n    if (controlsShown) {\n      timeLeft = getTimeLeft(this.state[controlsShown], 0)\n      startButtonHandler = this.closeControls\n      currentSession = `${capitalize(controlsShown)} duration`\n    } else {\n      timeLeft = getTimeLeft(\n        isBreak ? breakDuration : sessionDuration, secondsPassed\n      )\n      startButtonHandler = this.handleStartButton\n      currentSession = isBreak ? 'Break' : 'Session'\n    }\n\n    return (\n      <div className='App'>\n        <Alert ref={this.AlertRef} />\n        <div className='App__clock'>\n          <Progress\n            progress={progress}\n            isBreak={isBreak}\n            secondsPassed={secondsPassed}\n            showControls={this.showControls}\n          />\n          <Display\n            timeLeft={timeLeft}\n            currentSession={currentSession}\n            handleResetButton={this.handleResetButton}\n          />\n          <StartButton\n            isStarted={isStarted}\n            controlsShown={controlsShown}\n            onClick={startButtonHandler}\n          />\n          {controlsShown && <DurationControls\n            id={controlsShown}\n            onClick={this.setDuration}\n          />}\n        </div>\n        <span className='App__info'>\n            Tap on circles to set duration\n        </span>\n      </div>\n    )\n  }\n\n  showControls (type) {\n    this.setState({\n      controlsShown: type\n    })\n  }\n\n  closeControls () {\n    this.setState({\n      controlsShown: null\n    })\n  }\n\n  setDuration (duration, id) {\n    const MIN = 1\n    const MAX = 60\n\n    let newDuration = this.state[id] + duration\n    if (newDuration < MIN) newDuration = MIN\n    else if (newDuration > MAX) newDuration = MAX\n\n    this.setState({ [id]: newDuration })\n  }\n\n  tick () {\n    const { secondsPassed, isBreak } = this.state\n    const currentSessionDuration = isBreak ? this.state.break : this.state.session\n    const minutesPassed = (secondsPassed + 1) / 60\n\n    if (minutesPassed > currentSessionDuration) {\n      this.AlertRef.current.play()\n      this.setState({\n        secondsPassed: 0,\n        isBreak: !isBreak\n      })\n    } else {\n      this.setState({\n        secondsPassed: secondsPassed + 1\n      })\n    }\n  }\n\n  handleResetButton () {\n    clearInterval(this.timer)\n    delete this.timer\n    this.setState(defaultState)\n    this.AlertRef.current.pause()\n    this.AlertRef.current.currentTime = 0\n  }\n\n  handleStartButton () {\n    if (!this.timer) {\n      this.setState({ isStarted: true })\n      this.timer = setInterval(this.tick, 1000)\n    } else {\n      this.setState({ isStarted: false })\n      clearInterval(this.timer)\n      delete this.timer\n    }\n  }\n}\n\nfunction getTimeLeft (sessionDuration, secondsPassed) {\n  if (sessionDuration === 60 & secondsPassed === 0) {\n    return '60:00'\n  }\n\n  const msPassed = sessionDuration * 60000 - secondsPassed * 1000\n  const regex = /\\d+:\\d+(?=\\s)/\n  return new Date(msPassed).toTimeString().match(regex)[0]\n}\n\nfunction capitalize (string) {\n  return string.replace(/^\\w{1}/, match => match.toUpperCase())\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}